//
//  MentorsScreenViewController.swift
//  ITmentors
//
//  Created by Vladimir Alecseev on 27.09.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
import SnapKit
import UIKit

protocol MentorsScreenDisplayLogic: AnyObject {
    func displayMentorCells(viewModel: MentorsScreen.ShowMentorCells.ViewModel)
}

class MentorsScreenViewController: UIViewController, MentorsScreenDisplayLogic, ConstraintRelatableTarget {
    func displayMentorCells(viewModel: MentorsScreen.ShowMentorCells.ViewModel) {
        rows = viewModel.rows
        print(viewModel.rows.first?.cellIdentifier)
        DispatchQueue.main.async {
            
            self.addSubviews()
            self.addConstraints()
//            self.tableViewOfMentors.reloadData()
        }
        return
    }
    
    private var rows: [CellIdentifiable] = []

    //@IBOutlet private var nameTextField: UITextField!
    
    var interactor: MentorsScreenBusinessLogic?
    var router: (NSObjectProtocol & MentorsScreenRoutingLogic & MentorsScreenDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        view.backgroundColor = .AppPalette.backgroundColor
        interactor?.loadMentors()
        
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    
    
    
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = MentorsScreenInteractor()
        let presenter = MentorsScreenPresenter()
        let router = MentorsScreenRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    let tableViewOfMentors: UITableView = {
       let tv = UITableView()
        
        tv.backgroundColor = UIColor.AppPalette.elementsColor
        tv.layer.cornerRadius = 20
        tv.allowsSelection = false
        tv.separatorStyle = .singleLine
        tv.separatorColor = .white
        
        return tv
    }()
    
    
    
}


extension MentorsScreenViewController: UITableViewDelegate, UITableViewDataSource{
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
    
        print(rows.count)
        return rows.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
//        let cell = tableView.dequeueReusableCell(withIdentifier: "MentorCell", for: indexPath) as! MentorCell
        let cellViewModel = rows[indexPath.row]
        let cell = tableView.dequeueReusableCell(withIdentifier: cellViewModel.cellIdentifier, for: indexPath) as! MentorCell
        cell.backgroundColor = .AppPalette.secondElementColor
        cell.cellModel = cellViewModel
        cell.goToDetailedMentorScreenDelegate = self
        return cell
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        120
    }
    
}

extension MentorsScreenViewController{
    func addSubviews(){
        tableViewOfMentors.delegate = self
        tableViewOfMentors.dataSource = self
        tableViewOfMentors.register(MentorCell.self, forCellReuseIdentifier: "MentorCell")
        view.addSubview(tableViewOfMentors)

        
    }
    
    func addConstraints(){
        tableViewOfMentors.snp.makeConstraints { make in
            make.left.equalToSuperview().offset(15)
            make.right.equalToSuperview().offset(-15)

            make.top.equalToSuperview().offset(30)
            make.height.equalTo(300)
        }
    }
}

extension MentorsScreenViewController: goToDetailedMentorScreenDelegateProtocol{
    func goToDetailedMentorScreen(withData: MentorsScreen.ShowMentorCells.ViewModel.MentorCellViewModel) {
        print(123)
        router?.navigateToDetailed(source: self, destination: DetailedMentorViewController(), withData: withData)
    }
}
