//
//  MentorsScreenViewController.swift
//  ITmentors
//
//  Created by Vladimir Alecseev on 27.09.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
import SnapKit
import UIKit

protocol MentorsScreenDisplayLogic: AnyObject {
    func displayMentorCells(viewModel: MentorsScreen.ShowMentorCells.ViewModel)
}

class MentorsScreenViewController: UIViewController, MentorsScreenDisplayLogic, ConstraintRelatableTarget {
    func displayMentorCells(viewModel: MentorsScreen.ShowMentorCells.ViewModel) {
        self.rows = viewModel.rows
        print("rows count: \(rows.count)")
        spinner.removeFromSuperview()
        addTableView(withTableViewHeigth: CGFloat(rows.count * 110))
        mentorsCountLabel.text = "\(rows.count) mentors"
        return
    }
    
    private var rows: [CellIdentifiable] = []

    
    var interactor: MentorsScreenBusinessLogic?
    var router: (NSObjectProtocol & MentorsScreenRoutingLogic & MentorsScreenDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        MentorsListConfigurator.shared.configure(with: self)
        view.backgroundColor = .AppPalette.backgroundColor
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        MentorsListConfigurator.shared.configure(with: self)

    }
    override func viewDidLoad() {
        super.viewDidLoad()
        interactor?.loadMentors()
    }
    
    private let tableViewOfMentors: UITableView = {
       let tv = UITableView()
        
        tv.backgroundColor = UIColor.AppPalette.elementsColor
        tv.layer.cornerRadius = 20
        tv.allowsSelection = false
        tv.separatorStyle = .singleLine
        tv.separatorColor = .white
        
        return tv
    }()
    
    private let spinner: UIActivityIndicatorView = {
        let spinner = UIActivityIndicatorView(style: .large)
        spinner.translatesAutoresizingMaskIntoConstraints = false
        spinner.startAnimating()
        spinner.color = .white
    return spinner
    }()
    private let mentorsCountLabel: UILabel = {
        let l = UILabel()
        l.textColor = .darkGray
        l.textAlignment = .center
      return l
    }()
    
}


extension MentorsScreenViewController: UITableViewDelegate, UITableViewDataSource{
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        print("rowsss count \(rows.count)")
        return rows.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cellViewModel = rows[indexPath.row]
        let cell = tableView.dequeueReusableCell(withIdentifier: cellViewModel.cellIdentifier, for: indexPath) as! MentorCell
        cell.backgroundColor = .AppPalette.secondElementColor
        cell.cellModel = cellViewModel
        cell.goToDetailedMentorScreenDelegate = self
        return cell
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        110
    }
    
}

extension MentorsScreenViewController{
    private func addSubviews(){
        view.addSubview(spinner)
    }
    
    private func setConstraints(){
        spinner.snp.makeConstraints { make in
            make.centerX.centerY.equalToSuperview()
        }
    }
    private func addTableView(withTableViewHeigth: CGFloat){
        
        tableViewOfMentors.delegate = self
        tableViewOfMentors.dataSource = self
        tableViewOfMentors.register(MentorCell.self, forCellReuseIdentifier: "MentorCell")
        
        view.addSubview(tableViewOfMentors)
        view.addSubview(mentorsCountLabel)
        tableViewOfMentors.snp.makeConstraints { make in
            make.left.equalToSuperview().offset(15)
            make.right.equalToSuperview().offset(-15)

            make.top.equalToSuperview().offset(30)
            make.height.equalTo(withTableViewHeigth)
        }
        mentorsCountLabel.snp.makeConstraints { make in
            make.top.equalTo(tableViewOfMentors.snp.bottom).offset(7)
            make.centerX.equalToSuperview()
        }
    }
}

extension MentorsScreenViewController: goToDetailedMentorScreenDelegateProtocol{
    func goToDetailedMentorScreen(withData: MentorsScreen.ShowMentorCells.ViewModel.MentorCellViewModel) {
    
        router?.navigateToDetailed(source: self, destination: DetailedMentorViewController(), withData: withData)
    }
}
