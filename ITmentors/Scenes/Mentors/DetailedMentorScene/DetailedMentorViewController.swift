//
//  DetailedMentorViewController.swift
//  ITmentors
//
//  Created by Vladimir Alecseev on 29.09.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DetailedMentorDisplayLogic: AnyObject {
    func showMentorInfo(viewModel: DetailedMentor.ShowMentorInfo.ViewModel)
}

class DetailedMentorViewController: UIViewController, DetailedMentorDisplayLogic {
    
  
    
    var interactor: DetailedMentorBusinessLogic?
    var router: (NSObjectProtocol & DetailedMentorRoutingLogic & DetailedMentorDataPassing)?
    
    var messageLink = ""
    var arrayOfLanguages: [Languages] = []
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        DetailedMentorConfigurator.shared.configure(with: self)

    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        DetailedMentorConfigurator.shared.configure(with: self)

    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        view.backgroundColor = .AppPalette.backgroundColor
        showMentorInfo()
    }
    
    
    // MARK: interactor tasks
    
    private func showMentorInfo() {
        interactor?.showMentorInfo()
    }
    
    // MARK: presenter
    func showMentorInfo(viewModel: DetailedMentor.ShowMentorInfo.ViewModel) {
        self.navigationItem.title = viewModel.name
        guard let imageData = viewModel.imageData else {return}
        mentorImageView.image = UIImage(data: imageData)
        shortDiscriptionLabel.text = viewModel.shortDiscription
        messageLink = viewModel.messageLink ?? ""
        arrayOfLanguages = viewModel.languages
        guard let discr = viewModel.discription else {return}
        descriptionLabel.text = discr
        
        
        collectionViewOfLanguages.delegate = self
        collectionViewOfLanguages.dataSource = self
        collectionViewOfLanguages.register(LanguageCollectionViewCell.self, forCellWithReuseIdentifier: "LanguageCell")
        
        setConstraints()

    }

    
    private let mentorImageView: UIImageView = {
        let iv = UIImageView()
        //        iv.layer.cornerRadius = mentorImageView.frame.size.width / 2
        iv.layer.masksToBounds = true
        iv.image = UIImage()
        iv.layer.cornerRadius = 40
        iv.backgroundColor = .red
        iv.layer.borderColor = UIColor.AppPalette.backgroundColor.cgColor
        iv.layer.borderWidth = 2
        return iv
    }()
    private let shortDiscriptionLabel: UILabel = {
        let l = UILabel()
        l.textColor = .gray
        l.textAlignment = .center
        l.numberOfLines = 0
        l.lineBreakMode = .byWordWrapping
        l.adjustsFontSizeToFitWidth = true
        l.minimumScaleFactor = 0.5
        return l
    }()
    private let descriptionLabel: UILabel = {
        let l = UILabel()
        l.textColor = .white
        l.textAlignment = .center
        l.numberOfLines = 0
        l.lineBreakMode = .byWordWrapping
        return l
    }()
    private let writeToMentorButton: UIButton = {
        let b = UIButton()
        b.backgroundColor = .blue
        b.addTarget(self, action: #selector(writeMentor), for: .touchUpInside)
        b.setTitle("Связаться с ментором", for: .normal)
        b.layer.cornerRadius = 10
       return b
    }()
    
    @objc private func writeMentor(){
        guard messageLink != "" else {return}
        guard let url = URL(string: messageLink) else {return}
        UIApplication.shared.open(url)
    }
    
    
    private let collectionViewOfLanguages: UICollectionView = {
        let layout = UICollectionViewFlowLayout()
        layout.scrollDirection = .horizontal
        layout.minimumLineSpacing = 6
//        layout.
        let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)
        collectionView.backgroundColor = .clear
        collectionView.showsHorizontalScrollIndicator = false
       return collectionView
    }()
}


extension DetailedMentorViewController{
    func setConstraints(){
        view.addSubview(mentorImageView)
        view.addSubview(shortDiscriptionLabel)
        view.addSubview(collectionViewOfLanguages)
        view.addSubview(descriptionLabel)
        view.addSubview(writeToMentorButton)

        
        mentorImageView.snp.makeConstraints { make in
            make.top.equalToSuperview().offset(30)
            make.width.equalToSuperview().multipliedBy(0.7)
            make.height.equalTo(mentorImageView.snp.width)
            make.centerX.equalToSuperview()
        }
        shortDiscriptionLabel.snp.makeConstraints { make in
            make.top.equalTo(mentorImageView.snp.bottom).offset(10)
            make.height.equalTo(30)
            make.left.equalToSuperview().offset(30)
            make.right.equalToSuperview().offset(-30)
        }
        
        let screensize: CGRect = UIScreen.main.bounds
        let itemsWidth = screensize.width * 0.9
        var heigth = 0
        //calculate collectionViewHeight
        for i in 1...arrayOfLanguages.count + 1 {if i % 3 == 0{heigth += 35}}
        if heigth == 0 {heigth = 30}
        
        collectionViewOfLanguages.snp.makeConstraints { make in
            make.left.equalToSuperview().offset(40)
            make.right.equalToSuperview().offset(-40)
            make.height.equalTo(heigth)
            make.top.equalTo(shortDiscriptionLabel.snp.bottom).offset(10)
        }
        
        
        descriptionLabel.snp.makeConstraints { make in
            make.top.equalTo(collectionViewOfLanguages.snp.bottom).offset(10)
            make.height.greaterThanOrEqualTo(40.0)
            make.left.equalToSuperview().offset(30)
            make.right.equalToSuperview().offset(-30)
        }
        
        writeToMentorButton.snp.makeConstraints { make in
            make.left.equalToSuperview().offset(70)
            make.right.equalToSuperview().offset(-70)
            make.height.equalTo(40)
            make.top.equalTo(descriptionLabel.snp.bottom).offset(15)
        }
    }
}





//MARK: UICollectionViewDataSource

extension DetailedMentorViewController: UICollectionViewDataSource {

    func numberOfSections(in collectionView: UICollectionView) -> Int {
        return 1
    }
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return arrayOfLanguages.count
    }

    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "LanguageCell", for: indexPath) as! LanguageCollectionViewCell
        cell.update(language: arrayOfLanguages[indexPath.row])

        return cell
    }
}


//MARK: UICollectionViewDataSource
extension DetailedMentorViewController: UICollectionViewDelegate {
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        print(indexPath.row)
    }

}


//MARK: UICollectionViewDelegateFlowLayout
extension DetailedMentorViewController: UICollectionViewDelegateFlowLayout {
    func collectionView(_ collectionView: UICollectionView,
                        layout collectionViewLayout: UICollectionViewLayout,
                        sizeForItemAt indexPath: IndexPath) -> CGSize {
        
        return CGSize(width: 90, height: 30)
    }
    func collectionView(_ collectionView: UICollectionView,
                        layout collectionViewLayout: UICollectionViewLayout,
                        minimumLineSpacingForSectionAt section: Int) -> CGFloat {
        return 5
    }
    
    func collectionView(_ collectionView: UICollectionView,
                        layout collectionViewLayout: UICollectionViewLayout,
                        minimumInteritemSpacingForSectionAt section: Int) -> CGFloat {
        return 0
    }
    

    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, insetForSectionAt section: Int) -> UIEdgeInsets {
        let flowLayout = collectionViewLayout as! UICollectionViewFlowLayout
        let numberOfItems = CGFloat(collectionView.numberOfItems(inSection: section))
        let combinedItemWidth = (numberOfItems * flowLayout.itemSize.width) + ((numberOfItems - 1)  * flowLayout.minimumInteritemSpacing)
        let padding = ((collectionView.frame.width - combinedItemWidth) / 2) - (combinedItemWidth / CGFloat(numberOfItems)) + CGFloat(numberOfItems) + 18
        return UIEdgeInsets(top: 0, left: padding, bottom: 0, right: padding)
    }
}
