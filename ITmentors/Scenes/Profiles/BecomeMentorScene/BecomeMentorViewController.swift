//
//  BecomeMentorViewController.swift
//  ITmentors
//
//  Created by Vladimir Alecseev on 30.09.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol BecomeMentorDisplayLogic: AnyObject {
    func displayCompletion(viewModel: BecomeMentor.LoadDataOnServer.ViewModel)
}

class BecomeMentorViewController: UIViewController, BecomeMentorDisplayLogic, UINavigationControllerDelegate {

    var imagePicker = UIImagePickerController()
    var arrayOfLanguages: [Languages] = []

    var interactor: BecomeMentorBusinessLogic?
    var router: (NSObjectProtocol & BecomeMentorRoutingLogic & BecomeMentorDataPassing)?

    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        self.navigationController?.navigationBar.prefersLargeTitles = false

        setConstraints()
    }
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
//        let selectLanguagesVC = SelectLanguagesViewController()
//
//        router?.navigateToSomewhere(source: self, destination: selectLanguagesVC)
    }

    override func viewDidLayoutSubviews(){
        setConstraints()
    }
    // MARK: Do something

    func loadDataOnServer() {
//        let request = BecomeMentor.LoadDataOnServer.Request(name: <#T##String?#>, discription: <#T##String?#>, imageData: <#T##Data?#>, languages: <#T##[Languages]#>, messageLink: <#T##String?#>, shortDiscription: <#T##String?#>)
//        interactor?.doSomething(request: request)
    }

    func displayCompletion(viewModel: BecomeMentor.LoadDataOnServer.ViewModel) {
        //nameTextField.text = viewModel.name
    }
    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = BecomeMentorInteractor()
        let presenter = BecomeMentorPresenter()
        let router = BecomeMentorRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }




    let scrollView: UIScrollView = {
        let sv = UIScrollView()
        sv.backgroundColor = UIColor.AppPalette.backgroundColor
        sv.isScrollEnabled = true


        return sv
    }()


    let selectedImageView: UIImageView = {
      let iv = UIImageView()
        iv.backgroundColor = .darkGray
        iv.layer.borderColor = UIColor.AppPalette.secondElementColor.cgColor
        iv.layer.borderWidth = 2
        iv.isUserInteractionEnabled = true
        iv.clipsToBounds = true
        return iv
    }()
    let imageViewHeader: UILabel = {
        let l = UILabel()
        l.textColor = .darkGray
        l.text = "Выберите ваше фото"
        l.textAlignment = .center

        return l
    }()
    let shortDiscription: UITextField = {
        var textField = UITextField()
        textField.text = "Например: Senior IOS dev"
        textField.backgroundColor = UIColor.AppPalette.secondElementColor
        textField.textColor = .lightGray
        textField.font = UIFont.systemFont(ofSize: 15)
        textField.borderStyle = UITextField.BorderStyle.roundedRect
        textField.autocorrectionType = UITextAutocorrectionType.no
        textField.returnKeyType = UIReturnKeyType.continue
        textField.clearButtonMode = UITextField.ViewMode.whileEditing
        textField.contentVerticalAlignment = UIControl.ContentVerticalAlignment.center
        textField.layer.borderColor = UIColor.AppPalette.secondElementColor.cgColor
        textField.layer.borderWidth = 2
        textField.layer.cornerRadius = 10
        return textField

    }()
    let shortDiscriptionLabel: UILabel = {
        let l = UILabel()
        l.textColor = .darkGray
        l.text = "Введите краткое описание"
        l.textAlignment = .center

        return l
    }()
    let messageLink: UITextField = {
        var textField = UITextField()
        textField.text = "Например: https://t.me/escaping_closure"
        textField.backgroundColor = UIColor.AppPalette.secondElementColor
        textField.textColor = .lightGray
        textField.font = UIFont.systemFont(ofSize: 15)
        textField.borderStyle = UITextField.BorderStyle.roundedRect
        textField.autocorrectionType = UITextAutocorrectionType.no
        textField.returnKeyType = UIReturnKeyType.continue
        textField.clearButtonMode = UITextField.ViewMode.whileEditing
        textField.contentVerticalAlignment = UIControl.ContentVerticalAlignment.center
        textField.layer.borderColor = UIColor.AppPalette.secondElementColor.cgColor
        textField.layer.borderWidth = 2
        textField.layer.cornerRadius = 10
        return textField

    }()
    let messageLinkLabel: UILabel = {
        let l = UILabel()
        l.textColor = .darkGray
        l.text = "!Ссылка! для связи с вами"
        l.textAlignment = .center

        return l
    }()
    
    let name: UITextField = {
        var textField = UITextField()
        textField.text = "Например: Владимир"
        textField.backgroundColor = UIColor.AppPalette.secondElementColor
        textField.textColor = .lightGray
        textField.font = UIFont.systemFont(ofSize: 15)
        textField.borderStyle = UITextField.BorderStyle.roundedRect
        textField.autocorrectionType = UITextAutocorrectionType.no
        textField.returnKeyType = UIReturnKeyType.continue
        textField.clearButtonMode = UITextField.ViewMode.whileEditing
        textField.contentVerticalAlignment = UIControl.ContentVerticalAlignment.center
        textField.layer.borderColor = UIColor.AppPalette.secondElementColor.cgColor
        textField.layer.borderWidth = 2
        textField.layer.cornerRadius = 10
        return textField
    }()
    let nameLabel: UILabel = {
        let l = UILabel()
        l.textColor = .darkGray
        l.text = "Как вас зовут?"
        l.textAlignment = .center

        return l
    }()
    
    let discription: UITextView = {
        var textView = UITextView()
        textView.text = "Например: Помогаю новичкам со входом в IT. Подскажу на счет резюме и проведу мок собес."

        textView.font = UIFont.systemFont(ofSize: 15)
        textView.backgroundColor = UIColor.AppPalette.secondElementColor
        textView.textColor = .lightGray
        textView.isScrollEnabled = false
        textView.layer.borderColor = UIColor.AppPalette.secondElementColor.cgColor
        textView.layer.borderWidth = 2
        textView.layer.cornerRadius = 10
        return textView

    }()
    let discriptionLabel: UILabel = {
        let l = UILabel()
        l.textColor = .darkGray
        l.text = "Введите подробное описание"
        l.textAlignment = .center
        return l
    }()

    let confirmButton: UIButton = {
        let b = UIButton()
        b.backgroundColor = .AppPalette.secondElementColor
        b.setTitle("Подтвердить", for: .normal)
        b.addTarget(self, action: #selector(confirm), for: .touchUpInside)
       return b
    }()
    let selectLanguagesButton: UIButton = {
        let b = UIButton()
        b.backgroundColor = .blue
        b.setTitle("Выбрать языки программирования", for: .normal)
        b.addTarget(self, action: #selector(selectLanguagelTransition), for: .touchUpInside)
        b.layer.cornerRadius = 10
      return b
    }()
    @objc func selectLanguagelTransition(){
        let selectLanguagesVC = SelectLanguagesViewController()
        selectLanguagesVC.returnArrayOfLanguagesToPreviousScreenDelegate = self
        router?.navigateToSomewhere(source: self, destination: selectLanguagesVC)
    }
    @objc func confirm(){
//        guard let photoData = selectedImageView.image?.pngData() else {return}
//        guard let shortDiscriptionn = shortDiscription.text, shortDiscription.text != "", shortDiscription.text != "Например: Senior IOS dev"  else {return}
//        guard let discriptionn = discription.text, discription.text != "", discription.text != "Например: Помогаю новичкам со входом в IT. Подскажу на счет резюме и проведу мок собес." else {return}
//        let request = BecomeMentor.LoadDataOnServer.Request(name: <#T##String?#>, discription: discriptionn, imageData: photoData, languages: <#T##[Languages]#>, messageLink: <#T##String?#>, shortDiscription: shortDiscriptionn)
       //        interactor?.doSomething(request: request)
    }

}

//MARK: - subviews & constraints
extension BecomeMentorViewController{
    func setConstraints() {
        hideKeyboardWhenTappedAround()
//        scrollView.delegate = self
//        scrollView.contentSize = CGSize(width:self.view.frame.size.width, height: 1000)

        discription.delegate = self
        shortDiscription.delegate = self
        name.delegate = self
        messageLink.delegate = self
        let screensize: CGRect = UIScreen.main.bounds
        let imageViewWidth = screensize.width * 0.6
        let itemsWidth = screensize.width * 0.85

        scrollView.contentSize = CGSize(width: screensize.width, height: 2000)

        imagePicker.delegate = self
        imagePicker.allowsEditing = true



        view.addSubview(scrollView)

        scrollView.addSubview(selectedImageView)
        scrollView.addSubview(imageViewHeader)
        scrollView.addSubview(name)
        scrollView.addSubview(nameLabel)
        scrollView.addSubview(shortDiscription)
        scrollView.addSubview(shortDiscriptionLabel)
        scrollView.addSubview(discription)
        scrollView.addSubview(discriptionLabel)
        scrollView.addSubview(messageLink)
        scrollView.addSubview(messageLinkLabel)
        scrollView.addSubview(selectLanguagesButton)

        scrollView.snp.makeConstraints { make in
            make.top.right.left.bottom.equalToSuperview()

        }

        selectedImageView.snp.makeConstraints { make in
            make.top.equalTo(imageViewHeader.snp.bottom).offset(15)
            make.centerX.equalToSuperview()
            make.width.equalTo(imageViewWidth)
            make.height.equalTo(selectedImageView.snp.width)
        }
        selectedImageView.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(didTapAddPhoto)))
        selectedImageView.layer.cornerRadius = imageViewWidth / 2

        imageViewHeader.snp.makeConstraints { make in
            make.centerX.equalToSuperview()
            make.top.equalTo(scrollView.snp.top).offset(20)
            
        }

        nameLabel.snp.makeConstraints { make in
            make.top.equalTo(selectedImageView.snp.bottom).offset(15)
            make.centerX.equalToSuperview()
        }

        name.snp.makeConstraints { make in
            make.centerX.equalToSuperview()
            make.width.equalTo(itemsWidth)
            make.height.equalTo(40)
            make.top.equalTo(nameLabel.snp.bottom).offset(7)
        }
        shortDiscriptionLabel.snp.makeConstraints { make in
            make.top.equalTo(name.snp.bottom).offset(15)
            make.centerX.equalToSuperview()
        }

        shortDiscription.snp.makeConstraints { make in
            make.centerX.equalToSuperview()
            make.width.equalTo(itemsWidth)
            make.height.equalTo(40)
            make.top.equalTo(shortDiscriptionLabel.snp.bottom).offset(7)
        }

        discriptionLabel.snp.makeConstraints { make in
            make.top.equalTo(shortDiscription.snp.bottom).offset(15)
            make.centerX.equalToSuperview()
        }
        discription.snp.makeConstraints { make in
            make.centerX.equalToSuperview()
            make.width.equalTo(itemsWidth)
            make.top.equalTo(discriptionLabel.snp.bottom).offset(7)
        }
        messageLinkLabel.snp.makeConstraints { make in
            make.top.equalTo(discription.snp.bottom).offset(15)
            make.centerX.equalToSuperview()
        }

        messageLink.snp.makeConstraints { make in
            make.centerX.equalToSuperview()
            make.width.equalTo(itemsWidth)
            make.height.equalTo(40)
            make.top.equalTo(messageLinkLabel.snp.bottom).offset(7)
        }
        
        selectLanguagesButton.snp.makeConstraints { make in
            make.top.equalTo(messageLink.snp.bottom).offset(15)
            make.width.equalTo(itemsWidth)
            make.centerX.equalToSuperview()
            make.height.equalTo(40)
        }
    }
}
//MARK: - ImagePickerdelegate
extension BecomeMentorViewController: UIImagePickerControllerDelegate {
    func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any]) {
        print("Photo has picked1")

        guard let pickedImage = info[UIImagePickerController.InfoKey.editedImage] as? UIImage else { return }

        print("Photo has picked")
        selectedImageView.image = pickedImage


        dismiss(animated: true, completion: nil)
    }


    @objc func didTapAddPhoto(_ sender: Any) {
        print(123)
        let alert = UIAlertController(title: nil, message: nil, preferredStyle: .actionSheet)
        alert.addAction(UIAlertAction(title: "Photo Gallery", style: .default, handler: { (button) in
            self.imagePicker.sourceType = .photoLibrary

            self.present(self.imagePicker, animated: true, completion: nil)
        }))

        alert.addAction(UIAlertAction(title: "Cancel", style: .cancel, handler: nil))
        present(alert, animated: true, completion: nil)
    }
}

//MARK: - ScrollViewDelegate
extension BecomeMentorViewController: UIScrollViewDelegate{
    func scrollViewDidEndDragging(_ scrollView: UIScrollView, willDecelerate decelerate: Bool) {
        if !decelerate {
            stoppedScrolling()
        }
    }

    func scrollViewDidEndDecelerating(_ scrollView: UIScrollView) {
        stoppedScrolling()
    }

    func stoppedScrolling() {
        // done, do whatever
    }

}

//MARK: - TextViewDelegate
extension BecomeMentorViewController: UITextViewDelegate{
    func textViewDidBeginEditing (_ textView: UITextView) {
        if discription.text == "Например: Помогаю новичкам со входом в IT. Подскажу на счет резюме и проведу мок собес."{
            discription.text = ""
            discription.textColor = .white
        }
    }
    func textViewDidEndEditing(_ textView: UITextView) {
//        textView.textColor = .darkGray
    }
}
//MARK: - TextFieldDelegate
extension BecomeMentorViewController: UITextFieldDelegate{
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        textField.endEditing(false)
        return true
    }
    func textFieldDidEndEditing(_ textField: UITextField) {
//        textField.textColor = .darkGray
    }
    func textFieldDidBeginEditing(_ textField: UITextField) {
        switch textField{
        case shortDiscription:
            if textField.text == "Например: Senior IOS dev"{
                textField.text = ""
            }
        case messageLink:
            if textField.text == "Например: https://t.me/escaping_closure"{
                textField.text = ""
            }
        case name:
            if textField.text == "Например: Владимир"{
                textField.text = ""
            }
        default:
            print("nothing to do")
        }
    }
}

extension BecomeMentorViewController: ReturnArrayOfLanguagesToPreviousScreenProtocol{
    func getArray(array: [Languages]) {
        arrayOfLanguages = array
        print(arrayOfLanguages)
    }
}
